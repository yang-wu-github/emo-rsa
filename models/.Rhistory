geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
theme_bw() +
ylim(0, 1) +
xlab("true state")+
ylab("posterior probability mass") +
theme(legend.position='none')+
ggtitle("Model Predictions") +
theme(legend.position='none',
plot.title = element_text(hjust = 0.5)) +
facet_grid(cols = vars(model))
state.plot
```
### state: human
```{r}
d.raw <- read.csv(here("models/201221EMO-RSA_MAIN_STATE_January 13, 2021_15.51.csv"))
d <- d.raw %>%
slice(-1:-2) %>%
filter(Consent != "") %>%
select(ResponseId, starts_with("PUtt_"), starts_with("NUtt_")) %>%
pivot_longer(cols = c(starts_with("PUtt_"), starts_with("NUtt_")),
names_to = "trial", values_to = "response") %>%
separate(trial, into=c("utt","exp","race", "gender","question", "random")) %>%
rename(id = `ResponseId`) %>%
mutate(question = case_when(question == "GT" ~ "true state",
question == "check" ~ "check"),
condition = case_when(utt == "PUtt" & exp == "PExp" ~ "PU_PE",
utt == "PUtt" & exp == "NExp" ~ "PU_NE",
utt == "NUtt" & exp == "PExp" ~ "NU_PE",
utt == "NUtt" & exp == "NExp" ~ "NU_NE"),
condition = fct_relevel(condition, "PU_PE", "PU_NE", "NU_PE", "NU_NE"),
response = fct_relevel(response, "1", "2", "3", "4", "5", "6")) %>%
select(-random) %>%
filter(response != "")
checks <- d %>%
filter(question == "check") %>%
mutate(check_score = case_when(race == "A" & grepl("H", response, ignore.case = TRUE) ~ 1,
race == "B" & grepl("O", response, ignore.case = TRUE) ~ 1,
race == "L" & grepl("U", response, ignore.case = TRUE) ~ 1,
race == "W" & grepl("L", response, ignore.case = TRUE) ~ 1,
TRUE ~ 0)) %>%
group_by(id) %>%
summarize(perc_correct = mean(check_score))
ggplot(checks, aes(perc_correct)) +
geom_histogram(binwidth=.01) +
theme_bw() +
xlab("accuracy on check questions") +
ylab("number of participants")
# Only include those who got all check questions correct
d <- full_join(d, checks) %>%
filter(perc_correct == 1) %>%
filter
d2 <- d %>%
mutate(utt = case_when(utt == "PUtt" ~ "good",
utt == "NUtt" ~ "bad"),
exp = case_when(exp == "PExp" ~ "smile",
exp == "NExp" ~ "frown"),
utt = fct_relevel(utt, "good"),
exp = fct_relevel(exp, "smile"),
condition = case_when(condition=="PU_PE" ~ "good smile",
condition=="NU_NE" ~ "bad frown",
condition=="PU_NE" ~ "good frown",
condition=="NU_PE" ~ "bad smile"),
condition = factor(condition, levels=c("good smile", "bad frown", "good frown", "bad smile"))) %>%
filter(question=="true state")
condition <- c('good smile', 'bad frown', 'good frown','good frown')
response <- as.factor(c(1, 5, 5, 6))
n <- c(0, 0, 0, 0)
zeros <- data.frame(condition, response, n)
n_condition <- d2 %>%
group_by(condition) %>%
count()
n_condition
d.state <- d2 %>%
group_by(condition, response) %>%
count() %>%
bind_rows(zeros) %>%
mutate(proportion = case_when(condition=="good smile" ~ n/55,
condition=="good frown" ~ n/55,
condition=="bad smile" ~ n/55,
condition=="bad frown" ~ n/55),
ci_l = case_when(condition=="good smile" ~ prop.test(n, 55)$conf.int[1],
condition=="good frown" ~ prop.test(n, 55)$conf.int[1],
condition=="bad smile" ~ prop.test(n, 55)$conf.int[1],
condition=="bad frown" ~ prop.test(n, 55)$conf.int[1]),
ci_u = case_when(condition=="good smile" ~ prop.test(n, 55)$conf.int[2],
condition=="good frown" ~ prop.test(n, 55)$conf.int[2],
condition=="bad smile" ~ prop.test(n, 55)$conf.int[2],
condition=="bad frown" ~ prop.test(n, 55)$conf.int[2]))
h.state.plot <- d.state %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("true state") +
ylab("proportion chosen") +
theme_bw() +
ggtitle("Human Data") +
theme(plot.title = element_text(hjust = 0.5))
h.state.plot
```
### state: total
```{r}
state.total <- state.plot + h.state.plot + plot_layout(ncol=2, widths=c(16,1))
state.total
```
### infGoal: models
```{r}
# models
infGoal0 <- rbind(Ma0.infGoal, Ma1.infGoal, Ma2.infGoal, Ma3.infGoal, Ma4.infGoal, Ma5.infGoal, Ma6.infGoal, Ma7.infGoal,
Mb0.infGoal, Mb1.infGoal, Mb2.infGoal, Mb3.infGoal, Mb4.infGoal, Mb5.infGoal, Mb6.infGoal, Mb7.infGoal)
infGoal <- infGoal0 %>%
mutate(condition = paste(utterance, emotion),
condition = factor(condition, levels = c("good smile", "bad frown", "good frown", "bad smile")))
pd <- position_dodge(0.2)
infGoal.plot <- ggplot(infGoal, aes(x = infGoal, y = expval,
group = condition,
color=condition)) +
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
theme_bw() +
theme(legend.position='none')+
ylim(0, 0.3) +
#xlab("informational goal") +
scale_x_continuous(name="informational goal", breaks = c(0, 0.4, 0.8)) +
ylab("posterior probability mass") +
#ggtitle("\"How likely do you think the speaker's goal was to provide accurate feedback?\"") +
theme(legend.position='none',
plot.title = element_text(hjust = 0.5)) +
facet_grid(cols = vars(model))
infGoal.plot
```
### socGoal: models
```{r}
# models
socGoal0 <- rbind(Ma0.socGoal, Ma1.socGoal, Ma2.socGoal, Ma3.socGoal, Ma4.socGoal, Ma5.socGoal, Ma6.socGoal,Ma7.socGoal,
Mb0.socGoal, Mb1.socGoal, Mb2.socGoal, Mb3.socGoal, Mb4.socGoal, Mb5.socGoal, Mb6.socGoal, Mb7.socGoal)
socGoal <- socGoal0 %>%
mutate(condition = paste(utterance, emotion),
condition = factor(condition, levels = c("good smile", "bad frown", "good frown", "bad smile")))
pd <- position_dodge(0.2)
socGoal.plot <- ggplot(socGoal, aes(x = socGoal, y = expval,
group = condition,
color=condition)) +
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
theme_bw() +
theme(legend.position='none')+
ylim(0, 0.3) +
#xlab("social goal") +
scale_x_continuous(name="social goal", breaks = c(0, 0.4, 0.8)) +
ylab("posterior probability mass") +
#ggtitle("\"How likely do you think the speaker's goal was to be nice?\"") +
theme(legend.position='none',
plot.title = element_text(hjust = 0.5)) +
facet_grid(cols = vars(model))
socGoal.plot
```
###infGoal & socGoal: human
```{r}
dGoal.raw <- read.csv(here("models/201221EMO-RSA_MAIN_COMMGOALS_PREREGISTERED_DONOTCHANGE_January 13, 2021_20.41.csv"))
dGoal <- dGoal.raw %>%
slice(-1:-2) %>%
filter(Q358 != "", Q129 != "test") %>%
select(ResponseId, starts_with("PUtt_"), starts_with("NUtt_")) %>%
pivot_longer(cols = c(starts_with("PUtt_"), starts_with("NUtt_")),
names_to = "trial", values_to = "response") %>%
separate(trial, into=c("utt","exp","race", "gender","question", "random")) %>%
rename(id = `ResponseId`) %>%
mutate(question = case_when(question == "feed" ~ "informational goal",
question == "nice" ~ "social goal",
question == "check" ~ "check"),
condition = case_when(utt == "PUtt" & exp == "PExp" ~ "PU_PE",
utt == "PUtt" & exp == "NExp" ~ "PU_NE",
utt == "NUtt" & exp == "PExp" ~ "NU_PE",
utt == "NUtt" & exp == "NExp" ~ "NU_NE"),
condition = fct_relevel(condition, "PU_PE", "PU_NE", "NU_PE", "NU_NE"),
response = fct_relevel(response, "1", "2", "3", "4")) %>%
select(-random) %>%
filter(response != "")
checksGoal <- dGoal %>%
filter(question == "check") %>%
mutate(check_score = case_when(race == "A" & grepl("H", response, ignore.case = TRUE) ~ 1,
race == "B" & grepl("O", response, ignore.case = TRUE) ~ 1,
race == "L" & grepl("U", response, ignore.case = TRUE) ~ 1,
race == "W" & grepl("L", response, ignore.case = TRUE) ~ 1,
TRUE ~ 0)) %>%
group_by(id) %>%
summarize(perc_correct = mean(check_score))
ggplot(checksGoal, aes(perc_correct)) +
geom_histogram(binwidth=.01) +
theme_bw() +
xlab("accuracy on check questions") +
ylab("number of participants")
# Only include those who got all check questions correct
dGoal <- full_join(dGoal, checksGoal) %>%
filter(perc_correct == 1) %>%
filter
dGoal2 <- dGoal %>%
mutate(utt = case_when(utt == "PUtt" ~ "good",
utt == "NUtt" ~ "bad"),
exp = case_when(exp == "PExp" ~ "smile",
exp == "NExp" ~ "frown"),
utt = fct_relevel(utt, "good"),
exp = fct_relevel(exp, "smile"),
condition = case_when(condition=="PU_PE" ~ "good smile",
condition=="NU_NE" ~ "bad frown",
condition=="PU_NE" ~ "good frown",
condition=="NU_PE" ~ "bad smile"),
condition = factor(condition, levels=c("good smile", "bad frown", "good frown", "bad smile"))) %>%
filter(question!="check")
# infGoal: human
dInf <- dGoal2[dGoal2$question=="informational goal",]
n_conditionInf <- dInf %>%
group_by(condition) %>%
count()
n_conditionInf
d.infGoal <- dInf %>%
group_by(condition, response) %>%
count() %>%
mutate(proportion = case_when(condition=="good smile" ~ n/58,
condition=="good frown" ~ n/59,
condition=="bad smile" ~ n/58,
condition=="bad frown" ~ n/60),
ci_l = case_when(condition=="good smile" ~ prop.test(n, 58)$conf.int[1],
condition=="good frown" ~ prop.test(n, 59)$conf.int[1],
condition=="bad smile" ~ prop.test(n, 58)$conf.int[1],
condition=="bad frown" ~ prop.test(n, 60)$conf.int[1]),
ci_u = case_when(condition=="good smile" ~ prop.test(n, 58)$conf.int[2],
condition=="good frown" ~ prop.test(n, 59)$conf.int[2],
condition=="bad smile" ~ prop.test(n, 58)$conf.int[2],
condition=="bad frown" ~ prop.test(n, 60)$conf.int[2]))
h.infGoal.plot <- d.infGoal %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size=0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("informational goal") +
ylab("proportion chosen") +
theme_bw() +
#ggtitle("Human Data") +
theme(plot.title = element_text(hjust = 0.5))
h.infGoal.plot
# socGoal: human
dSoc <- dGoal2[dGoal2$question=="social goal",]
n_conditionSoc <- dSoc %>%
group_by(condition) %>%
count()
n_conditionSoc
d.socGoal <- dSoc %>%
group_by(condition, response) %>%
count() %>%
mutate(proportion = case_when(condition=="good smile" ~ n/58,
condition=="good frown" ~ n/58,
condition=="bad smile" ~ n/58,
condition=="bad frown" ~ n/59),
ci_l = case_when(condition=="good smile" ~ prop.test(n, 58)$conf.int[1],
condition=="good frown" ~ prop.test(n, 58)$conf.int[1],
condition=="bad smile" ~ prop.test(n, 58)$conf.int[1],
condition=="bad frown" ~ prop.test(n, 59)$conf.int[1]),
ci_u = case_when(condition=="good smile" ~ prop.test(n, 58)$conf.int[2],
condition=="good frown" ~ prop.test(n, 58)$conf.int[2],
condition=="bad smile" ~ prop.test(n, 58)$conf.int[2],
condition=="bad frown" ~ prop.test(n, 59)$conf.int[2]))
h.socGoal.plot <- d.socGoal %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("social goal") +
ylab("proportion chosen") +
theme_bw() +
#ggtitle("Human Data") +
theme(plot.title = element_text(hjust = 0.5))
h.socGoal.plot
```
###infGoal: total
```{r}
infGoal.total <- infGoal.plot + h.infGoal.plot + plot_layout(ncol=2, widths=c(16,0.9))
infGoal.total
```
###socGoal: total
```{r}
socGoal.total <- socGoal.plot + h.socGoal.plot + plot_layout(ncol=2, widths=c(16, 0.9))
socGoal.total
```
###total
```{r}
total <- state.total / infGoal.total / socGoal.total
ggsave(here("models/plots_16models_graded.pdf"), width=22, height=8)
# without human data
# total <- state.plot + infGoal.plot + socGoal.plot & theme(legend.position = "right")
# total + plot_layout(ncol=1, guides = "collect")
# ggsave(here("models/plots_16models_graded_predictions.pdf"), width=24, height=8)
```
# ## line plots - averaged
# ### state
# ```{r}
# model_state_ave <- state %>%
#   mutate(score = state*expval) %>%
#   group_by(model, condition) %>%
#   summarise(mean = mean(score))
# human.state.ave <- d.state %>%
#   mutate(score = (as.numeric(response)-1) * probability /7) %>%
#   group_by(condition) %>%
#   summarise(mean=sum(score)) %>%
#   mutate(model = "pilot data")
# state_ave <- rbind(data.frame(model_state_ave), data.frame(human.state.ave))
# #state_ave$model <- factor(state_ave$model, levels = c("M: UttInfNoEmo","M0: NoEmo", "M1: EmoComm", "M1a1: UttInfEmoSoc","M1a3: EmoSoc", "M2: EmoNotComm", "M3: InferEmoComm", "M3a: InferEmoTrue/Soc",  "human (pilot)"))
#
# state_ave_plot <- ggplot(state_ave, aes(x = model, y = mean,
#                                 group = condition, color=condition))+
#   geom_line(position=pd) +
#   geom_point(position=pd) +
#   scale_color_brewer(palette="Dark2") +
#   ylim(0, 1) +
#   xlab("state") +
#   theme_bw() +
#   #ggtitle("Human") +
#   theme(plot.title = element_text(hjust = 0.5))
# state_ave_plot
# ```
# ### infGoal
# ```{r}
# model_infGoal_ave <- infGoal %>%
#   mutate(score = infGoal*expval) %>%
#   group_by(model, condition) %>%
#   summarise(mean = sum(score))
# human.infGoal.ave <- d.infGoal %>%
#   mutate(score = (as.numeric(response)-1) * probability /7) %>%
#   group_by(condition) %>%
#   summarise(mean=sum(score)) %>%
#   mutate(model = "pilot data")
# infGoal_ave <- rbind(data.frame(model_infGoal_ave), data.frame(human.infGoal.ave))
# #infGoal_ave$model <- factor(infGoal_ave$model, levels = c("M: UttInfNoEmo","M0: NoEmo", "M1: EmoComm","M1a1: UttInfEmoSoc", "M1a3: EmoSoc", "M2: EmoNotComm", "M3: InferEmoComm", "M3a: InferEmoTrue/Soc",  "human (pilot)"))
#
# infGoal_ave_plot <- ggplot(infGoal_ave, aes(x = model, y = mean,
#                                 group = condition, color=condition))+
#   geom_line(position=pd) +
#   geom_point(position=pd) +
#   scale_color_brewer(palette="Dark2") +
#   ylim(0, 1) +
#   xlab("infGoal") +
#   theme_bw() +
#   #ggtitle("Human") +
#   theme(plot.title = element_text(hjust = 0.5))
# infGoal_ave_plot
# ```
# ### socGoal
# ```{r}
# model_socGoal_ave <- socGoal %>%
#   mutate(score = socGoal*expval) %>%
#   group_by(model, condition) %>%
#   summarise(mean = sum(score))
# human.socGoal.ave <- d.socGoal %>%
#   mutate(score = (as.numeric(response)-1) * probability /7) %>%
#   group_by(condition) %>%
#   summarise(mean=sum(score)) %>%
#   mutate(model = "pilot data")
# socGoal_ave <- rbind(data.frame(model_socGoal_ave), data.frame(human.socGoal.ave))
# #socGoal_ave$model <- factor(socGoal_ave$model, levels = c("M: UttInfNoEmo", "M0: NoEmo", "M1: EmoComm","M1a1: UttInfEmoSoc","M1a3: EmoSoc", "M2: EmoNotComm", "M3: InferEmoComm", "M3a: InferEmoTrue/Soc",  "human (pilot)"))
#
# socGoal_ave_plot <- ggplot(socGoal_ave, aes(x = model, y = mean,
#                                 group = condition, color=condition))+
#   geom_line(position=pd) +
#   geom_point(position=pd) +
#   scale_color_brewer(palette="Dark2") +
#   ylim(0, 1) +
#   xlab("socGoal") +
#   theme_bw() +
#   #ggtitle("Human") +
#   theme(plot.title = element_text(hjust = 0.5))
# socGoal_ave_plot
# ```
# ### inferEmoComm
# ```{r}
# Ma5_emoComm_ave <- Ma5.emoComm %>%
#   mutate(condition = paste(utterance, emotion),
#          emoComm = case_when(emoComm=="FALSE" ~ 0,
#                              emoComm=="TRUE" ~ 1),
#          score = emoComm * expval) %>%
#   group_by(condition, model) %>%
#   summarise(mean=sum(score))
# Ma6_emoComm_ave <- Ma6.emoComm %>%
#   mutate(condition = paste(utterance, emotion),
#          emoComm = case_when(emoComm=="FALSE" ~ 0,
#                              emoComm=="TRUE" ~ 1),
#          score = emoComm * expval) %>%
#   group_by(condition, model) %>%
#   summarise(mean=sum(score))
#
# Ma7_emoComm_ave <- Ma7.emoComm %>%
#   mutate(condition = paste(utterance, emotion),
#          emoComm = case_when(emoComm=="FALSE" ~ 0,
#                              emoComm=="TRUE" ~ 1),
#          score = emoComm * expval) %>%
#   group_by(condition, model) %>%
#   summarise(mean=sum(score))
#
# Mb5_emoComm_ave <- Mb5.emoComm %>%
#   mutate(condition = paste(utterance, emotion),
#          emoComm = case_when(emoComm=="FALSE" ~ 0,
#                              emoComm=="TRUE" ~ 1),
#          score = emoComm * expval) %>%
#   group_by(condition, model) %>%
#   summarise(mean=sum(score))
# Mb6_emoComm_ave <- Mb6.emoComm %>%
#   mutate(condition = paste(utterance, emotion),
#          emoComm = case_when(emoComm=="FALSE" ~ 0,
#                              emoComm=="TRUE" ~ 1),
#          score = emoComm * expval) %>%
#   group_by(condition, model) %>%
#   summarise(mean=sum(score))
#
# Mb7_emoComm_ave <- Mb7.emoComm %>%
#   mutate(condition = paste(utterance, emotion),
#          emoComm = case_when(emoComm=="FALSE" ~ 0,
#                              emoComm=="TRUE" ~ 1),
#          score = emoComm * expval) %>%
#   group_by(condition, model) %>%
#   summarise(mean=sum(score))
#
# Ma0_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Ma0: UttInfEmoNon", mean = NA)
# Ma1_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Ma1: UttInfEmoSoc", mean = NA)
# Ma2_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Ma2: UttInfEmoBal", mean = NA)
# Ma3_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Ma3: UttInfEmoTru", mean = NA)
# Ma4_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Ma4: UttInfEmoInf", mean = NA)
# Mb0_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Mb0: UttBalEmoNon", mean = NA)
# Mb1_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Mb1: UttBalEmoSoc", mean = NA)
# Mb2_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Mb2: UttBalEmoBal", mean = NA)
# Mb3_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Mb3: UttBalEmoTru", mean = NA)
# Mb4_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "Mb4: UttBalEmoInf", mean = NA)
# h_emoComm_ave <- Ma5_emoComm_ave %>%
#   mutate(model= "pilot data", mean = NA)
# emoComm_ave <- rbind(Ma0_emoComm_ave,Ma1_emoComm_ave, Ma2_emoComm_ave, Ma3_emoComm_ave,
#                      Ma4_emoComm_ave, Ma5_emoComm_ave, Ma6_emoComm_ave, Ma7_emoComm_ave,
#                      Mb0_emoComm_ave,Mb1_emoComm_ave, Mb2_emoComm_ave, Mb3_emoComm_ave,
#                      Mb4_emoComm_ave, Mb5_emoComm_ave, Mb6_emoComm_ave, Mb7_emoComm_ave, h_emoComm_ave)
# emoComm_ave <- emoComm_ave %>%
#   mutate(condition = factor(condition, levels = c("good smile", "bad frown", "good frown", "bad smile")))
#
# emoComm_ave_plot <- ggplot(emoComm_ave, aes(x = model, y = mean,
#                                 group = condition, color=condition))+
#   geom_line(position=pd) +
#   geom_point(position=pd) +
#   scale_color_brewer(palette="Dark2") +
#   ylim(0, 1) +
#   xlab("emoComm") +
#   theme_bw() +
#   #ggtitle("Human") +
#   theme(plot.title = element_text(hjust = 0.5))
# emoComm_ave_plot
# ggsave(here("models/plots_emocomm.pdf"), width=25, height=3)
#
# ```
# ###total
# ```{r}
# #total_ave <- state_ave_plot + infGoal_ave_plot + socGoal_ave_plot + emoComm_ave_plot & theme(legend.position = "top")
# total_ave <- state_ave_plot + infGoal_ave_plot + socGoal_ave_plot & theme(legend.position = "top")
# total_ave + plot_layout(ncol=1, guides = "collect")
# ggsave(here("models/plots_14models_averaged.pdf"), width=22, height=8)
# ```
#
# ### analysis
# ```{r cache = TRUE}
# d2$response <- as.numeric(d2$response)
# # Bayesian mixed-effects model
# state <- brm(response ~ utt * exp + (1 + utt*exp|id) + (1 + utt*exp|race),
#              data = d2[d$question=="ground truth",],
#              family = cumulative(link = "logit", threshold = "flexible"))
# summary(state)
# infGoal <- brm(response ~ utt * exp + (1 + utt*exp|id) + (1 + utt*exp|race),
#                data = d2[d$question=="accurate feedback",],
#                family = cumulative(link = "logit", threshold = "flexible"))
# summary(infGoal)
# socGoal <- brm(response ~ utt * exp + (1 + utt*exp|id) + (1 + utt*exp|race),
#                data = d2[d$question=="niceness",],
#                family = cumulative(link = "logit", threshold = "flexible"))
# summary(socGoal)
#
# # socGoal <- brm(response ~ condition + (1 + condition|id) + (1 + condition|race),
# #                data = d2[d$question=="niceness",],
# #                family = cumulative(link = "logit", threshold = "flexible"))
# # summary(socGoal)
#
# # linear mixed-effects model
# state <- lmer(response ~ utt * exp + (1|id), data = d2[d$question=="ground truth",])
# summary(state)
# infGoal <- lmer(response ~ utt * exp + (1|id), data = d2[d$question=="accurate feedback",])
# summary(infGoal)
# socGoal <- lmer(response ~ utt * exp + (1|id), data = d2[d$question=="niceness",])
# summary(socGoal)
# ```
