scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("true state") +
ylab("proportion chosen") +
theme_bw() +
ggtitle("Human Data") +
theme(plot.title = element_text(hjust = 0.5))
h.state.plot
h.state.plot <- d.state %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("true state") +
ylab("proportion chosen") +
theme_bw() +
ggtitle("Inferences of True State") +
theme(plot.title = element_text(hjust = 0.5))
h.state.plot
dGoal.raw <- read.csv(here("models/201221EMO-RSA_MAIN_COMMGOALS_PREREGISTERED_DONOTCHANGE_January 13, 2021_20.41.csv"))
dGoal <- dGoal.raw %>%
slice(-1:-2) %>%
filter(Q358 != "", Q129 != "test") %>%
select(ResponseId, starts_with("PUtt_"), starts_with("NUtt_")) %>%
pivot_longer(cols = c(starts_with("PUtt_"), starts_with("NUtt_")),
names_to = "trial", values_to = "response") %>%
separate(trial, into=c("utt","exp","race", "gender","question", "random")) %>%
rename(id = `ResponseId`) %>%
mutate(question = case_when(question == "feed" ~ "informational goal",
question == "nice" ~ "social goal",
question == "check" ~ "check"),
condition = case_when(utt == "PUtt" & exp == "PExp" ~ "PU_PE",
utt == "PUtt" & exp == "NExp" ~ "PU_NE",
utt == "NUtt" & exp == "PExp" ~ "NU_PE",
utt == "NUtt" & exp == "NExp" ~ "NU_NE"),
condition = fct_relevel(condition, "PU_PE", "PU_NE", "NU_PE", "NU_NE"),
response = fct_relevel(response, "1", "2", "3", "4")) %>%
select(-random) %>%
filter(response != "")
checksGoal <- dGoal %>%
filter(question == "check") %>%
mutate(check_score = case_when(race == "A" & grepl("H", response, ignore.case = TRUE) ~ 1,
race == "B" & grepl("O", response, ignore.case = TRUE) ~ 1,
race == "L" & grepl("U", response, ignore.case = TRUE) ~ 1,
race == "W" & grepl("L", response, ignore.case = TRUE) ~ 1,
TRUE ~ 0)) %>%
group_by(id) %>%
summarize(perc_correct = mean(check_score))
ggplot(checksGoal, aes(perc_correct)) +
geom_histogram(binwidth=.01) +
theme_bw() +
xlab("accuracy on check questions") +
ylab("number of participants")
# Only include those who got all check questions correct
dGoal <- full_join(dGoal, checksGoal) %>%
filter(perc_correct == 1) %>%
filter
dGoal2 <- dGoal %>%
mutate(utt = case_when(utt == "PUtt" ~ "good",
utt == "NUtt" ~ "bad"),
exp = case_when(exp == "PExp" ~ "smile",
exp == "NExp" ~ "frown"),
utt = fct_relevel(utt, "good"),
exp = fct_relevel(exp, "smile"),
condition = case_when(condition=="PU_PE" ~ "good smile",
condition=="NU_NE" ~ "bad frown",
condition=="PU_NE" ~ "good frown",
condition=="NU_PE" ~ "bad smile"),
condition = factor(condition, levels=c("good smile", "bad frown", "good frown", "bad smile"))) %>%
filter(question!="check") %>%
select(-perc_correct)
# infGoal: human
dInf <- dGoal2[dGoal2$question=="informational goal",]
n_conditionInf <- dInf %>%
group_by(condition) %>%
count()
n_conditionInf
d.infGoal <- dInf %>%
group_by(condition, response) %>%
count() %>%
mutate(proportion = case_when(condition=="good smile" ~ n/58,
condition=="good frown" ~ n/59,
condition=="bad smile" ~ n/58,
condition=="bad frown" ~ n/60),
ci_l = case_when(condition=="good smile" ~ prop.test(n, 58)$conf.int[1],
condition=="good frown" ~ prop.test(n, 59)$conf.int[1],
condition=="bad smile" ~ prop.test(n, 58)$conf.int[1],
condition=="bad frown" ~ prop.test(n, 60)$conf.int[1]),
ci_u = case_when(condition=="good smile" ~ prop.test(n, 58)$conf.int[2],
condition=="good frown" ~ prop.test(n, 59)$conf.int[2],
condition=="bad smile" ~ prop.test(n, 58)$conf.int[2],
condition=="bad frown" ~ prop.test(n, 60)$conf.int[2]))
h.infGoal.plot <- d.infGoal %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size=0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("informational goal") +
ylab("proportion chosen") +
theme_bw() +
#ggtitle("Human Data") +
theme(plot.title = element_text(hjust = 0.5))
h.infGoal.plot
# socGoal: human
dSoc <- dGoal2[dGoal2$question=="social goal",]
n_conditionSoc <- dSoc %>%
group_by(condition) %>%
count()
n_conditionSoc
d.socGoal <- dSoc %>%
group_by(condition, response) %>%
count() %>%
mutate(proportion = case_when(condition=="good smile" ~ n/58,
condition=="good frown" ~ n/58,
condition=="bad smile" ~ n/58,
condition=="bad frown" ~ n/59),
ci_l = case_when(condition=="good smile" ~ prop.test(n, 58)$conf.int[1],
condition=="good frown" ~ prop.test(n, 58)$conf.int[1],
condition=="bad smile" ~ prop.test(n, 58)$conf.int[1],
condition=="bad frown" ~ prop.test(n, 59)$conf.int[1]),
ci_u = case_when(condition=="good smile" ~ prop.test(n, 58)$conf.int[2],
condition=="good frown" ~ prop.test(n, 58)$conf.int[2],
condition=="bad smile" ~ prop.test(n, 58)$conf.int[2],
condition=="bad frown" ~ prop.test(n, 59)$conf.int[2]))
h.socGoal.plot <- d.socGoal %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("social goal") +
ylab("proportion chosen") +
theme_bw() +
#ggtitle("Human Data") +
theme(plot.title = element_text(hjust = 0.5))
h.socGoal.plot
h.infGoal.plot <- d.infGoal %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size=0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("informational goal") +
ylab("proportion chosen") +
theme_bw() +
ggtitle("Inferences of Informational Goal") +
theme(plot.title = element_text(hjust = 0.5))
h.infGoal.plot
h.socGoal.plot <- d.socGoal %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("social goal") +
ylab("proportion chosen") +
theme_bw() +
ggtitle("Inferences of Social Goal") +
theme(plot.title = element_text(hjust = 0.5))
h.socGoal.plot
h.total <- h.state.plot + h.infGoal.plot + h.socGoal.plot & theme(legend.position = "bottom")
h.total + plot_layout(ncol=1, guides = "collect")
h.total <- h.state.plot / h.infGoal.plot / h.socGoal.plot & theme(legend.position = "bottom")
h.total + plot_layout(ncol=1, guides = "collect")
h.total <- h.state.plot | h.infGoal.plot | h.socGoal.plot & theme(legend.position = "bottom")
h.total + plot_layout(ncol=1, guides = "collect")
h.total <- h.state.plot + h.infGoal.plot + h.socGoal.plot & theme(legend.position = "bottom")
h.total + plot_layout(ncol=3, guides = "collect")
h.state.plot <- d.state %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("true state") +
ylab("proportion chosen") +
theme_bw() +
#ggtitle("Inferences of True State") +
theme(plot.title = element_text(hjust = 0.5))
h.state.plot
h.infGoal.plot <- d.infGoal %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size=0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("informational goal") +
ylab("proportion chosen") +
theme_bw() +
#ggtitle("Inferences of Informational Goal") +
theme(plot.title = element_text(hjust = 0.5))
h.infGoal.plot
h.socGoal.plot <- d.socGoal %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("social goal") +
ylab("proportion chosen") +
theme_bw() +
#ggtitle("Inferences of Social Goal") +
theme(plot.title = element_text(hjust = 0.5))
h.socGoal.plot
h.total <- h.state.plot + h.infGoal.plot + h.socGoal.plot & theme(legend.position = "bottom")
h.total + plot_layout(ncol=3, guides = "collect")
ggsave(here("models/plot_human.pdf"), width=12, height=4)
ggsave(here("models/plot_human.pdf"), width=8, height=3)
h.total <- h.state.plot + h.infGoal.plot + h.socGoal.plot & theme(legend.position = "right")
h.total + plot_layout(ncol=3, guides = "collect")
ggsave(here("models/plot_human.pdf"), width=8, height=3)
ggsave(here("models/plot_human.pdf"), width=8, height=2.3)
ggsave(here("models/plot_human.pdf"), width=8, height=2)
library(rwebppl)
library(here)
library(ggplot2)
library(tidyverse)
library(langcog)
library(patchwork)
library(ggpubr)
library(lme4)
library(brms)
rm(list = ls())
d.Mb7 <- webppl(
program_file = here("models/Mb7_UttBalEmoTruBal.wppl"),
data = df,
data_var = "df"
)
df <- expand.grid(
utterance = c("good", "bad"),
emotion = c("smile", "frown")
)
d.Ma0 <- webppl(
program_file = here("models/Ma0_UttInfEmoNon.wppl"),
data = df,
data_var = "df"
)
d.Ma0.l1 <- bind_rows(d.Ma0$l1) %>%
mutate(model = "Ma0:\nUttInfEmoNon")
df <- expand.grid(
utterance = c("good", "bad"),
emotion = c("smile", "frown")
)
d.Ma1 <- webppl(
program_file = here("models/Ma1_UttInfEmoSoc.wppl"),
data = df,
data_var = "df"
)
d.Ma7 <- webppl(
program_file = here("models/Ma7_UttInfEmoTruBal.wppl"),
data = df,
data_var = "df"
)
df <- expand.grid(
utterance = c("good", "bad"),
emotion = c("smile", "frown")
)
d.Ma7 <- webppl(
program_file = here("models/Ma7_UttInfEmoTruBal.wppl"),
data = df,
data_var = "df"
)
d.Ma7.l1 <- bind_rows(d.Ma7$l1) %>%
mutate(model = "Ma7:\nUttInfEmoTruBal")
# l1: state
Ma7.state <- d.Ma7.l1 %>%
group_by(utterance, emotion, state, model) %>%
summarize(expval = sum(prob))
# l1: infGoal
Ma7.infGoal <- d.Ma7.l1 %>%
group_by(utterance, emotion, infGoal, model) %>%
summarize(expval = sum(prob))
# l1: socGoal
Ma7.socGoal <- d.Ma7.l1 %>%
group_by(utterance, emotion, socGoal, model) %>%
summarize(expval = sum(prob))
# l1: emoComm
Ma7.emoComm <- d.Ma7.l1 %>%
group_by(utterance, emotion, emoComm, model) %>%
summarize(expval = sum(prob))
d.Mb7 <- webppl(
program_file = here("models/Mb7_UttBalEmoTruBal.wppl"),
data = df,
data_var = "df"
)
df <- expand.grid(
utterance = c("good", "bad"),
emotion = c("smile", "frown")
)
d.Mb7 <- webppl(
program_file = here("models/Mb7_UttBalEmoTruBal.wppl"),
data = df,
data_var = "df"
)
d.Mb7.l1 <- bind_rows(d.Mb7$l1) %>%
mutate(model = "Mb7:\nUttBalEmoTruBal")
# l1: state
Mb7.state <- d.Mb7.l1 %>%
group_by(utterance, emotion, state, model) %>%
summarize(expval = sum(prob))
# l1: emoComm
Mb7.emoComm <- d.Mb7.l1 %>%
group_by(utterance, emotion, emoComm, model) %>%
summarize(expval = sum(prob))
# l1: infGoal
Mb7.infGoal <- d.Mb7.l1 %>%
group_by(utterance, emotion, infGoal, model) %>%
summarize(expval = sum(prob))
# l1: socGoal
Mb7.socGoal <- d.Mb7.l1 %>%
group_by(utterance, emotion, socGoal, model) %>%
summarize(expval = sum(prob))
d.raw <- read.csv(here("models/201221EMO-RSA_MAIN_STATE_January 13, 2021_15.51.csv"))
d <- d.raw %>%
slice(-1:-2) %>%
filter(Consent != "") %>%
select(ResponseId, starts_with("PUtt_"), starts_with("NUtt_")) %>%
pivot_longer(cols = c(starts_with("PUtt_"), starts_with("NUtt_")),
names_to = "trial", values_to = "response") %>%
separate(trial, into=c("utt","exp","race", "gender","question", "random")) %>%
rename(id = `ResponseId`) %>%
mutate(question = case_when(question == "GT" ~ "true state",
question == "check" ~ "check"),
condition = case_when(utt == "PUtt" & exp == "PExp" ~ "PU_PE",
utt == "PUtt" & exp == "NExp" ~ "PU_NE",
utt == "NUtt" & exp == "PExp" ~ "NU_PE",
utt == "NUtt" & exp == "NExp" ~ "NU_NE"),
condition = fct_relevel(condition, "PU_PE", "PU_NE", "NU_PE", "NU_NE"),
response = fct_relevel(response, "1", "2", "3", "4", "5", "6")) %>%
select(-random) %>%
filter(response != "")
checks <- d %>%
filter(question == "check") %>%
mutate(check_score = case_when(race == "A" & grepl("H", response, ignore.case = TRUE) ~ 1,
race == "B" & grepl("O", response, ignore.case = TRUE) ~ 1,
race == "L" & grepl("U", response, ignore.case = TRUE) ~ 1,
race == "W" & grepl("L", response, ignore.case = TRUE) ~ 1,
TRUE ~ 0)) %>%
group_by(id) %>%
summarize(perc_correct = mean(check_score))
ggplot(checks, aes(perc_correct)) +
geom_histogram(binwidth=.01) +
theme_bw() +
xlab("accuracy on check questions") +
ylab("number of participants")
# Only include those who got all check questions correct
d <- full_join(d, checks) %>%
filter(perc_correct == 1) %>%
filter
d2 <- d %>%
mutate(utt = case_when(utt == "PUtt" ~ "good",
utt == "NUtt" ~ "bad"),
exp = case_when(exp == "PExp" ~ "smile",
exp == "NExp" ~ "frown"),
utt = fct_relevel(utt, "good"),
exp = fct_relevel(exp, "smile"),
condition = case_when(condition=="PU_PE" ~ "good smile",
condition=="NU_NE" ~ "bad frown",
condition=="PU_NE" ~ "good frown",
condition=="NU_PE" ~ "bad smile"),
condition = factor(condition, levels=c("good smile", "bad frown", "good frown", "bad smile"))) %>%
filter(question=="true state") %>%
select(-perc_correct)
condition <- c('good smile', 'bad frown', 'good frown','good frown')
response <- as.factor(c(1, 5, 5, 6))
n <- c(0, 0, 0, 0)
zeros <- data.frame(condition, response, n)
n_condition <- d2 %>%
group_by(condition) %>%
count()
n_condition
d.state <- d2 %>%
group_by(condition, response) %>%
count() %>%
bind_rows(zeros) %>%
mutate(proportion = case_when(condition=="good smile" ~ n/55,
condition=="good frown" ~ n/55,
condition=="bad smile" ~ n/55,
condition=="bad frown" ~ n/55),
ci_l = case_when(condition=="good smile" ~ prop.test(n, 55)$conf.int[1],
condition=="good frown" ~ prop.test(n, 55)$conf.int[1],
condition=="bad smile" ~ prop.test(n, 55)$conf.int[1],
condition=="bad frown" ~ prop.test(n, 55)$conf.int[1]),
ci_u = case_when(condition=="good smile" ~ prop.test(n, 55)$conf.int[2],
condition=="good frown" ~ prop.test(n, 55)$conf.int[2],
condition=="bad smile" ~ prop.test(n, 55)$conf.int[2],
condition=="bad frown" ~ prop.test(n, 55)$conf.int[2]))
h.state.plot <- d.state %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("true state") +
ylab("proportion chosen") +
theme_bw() +
ggtitle("Human Data") +
theme(plot.title = element_text(hjust = 0.5))
pd <- position_dodge(0.2)
h.state.plot <- d.state %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("true state") +
ylab("proportion chosen") +
theme_bw() +
ggtitle("Human Data") +
theme(plot.title = element_text(hjust = 0.5))
h.state.plot
d.raw <- read.csv(here("models/201221EMO-RSA_MAIN_STATE_January 13, 2021_15.51.csv"))
d <- d.raw %>%
slice(-1:-2) %>%
filter(Consent != "") %>%
select(ResponseId, starts_with("PUtt_"), starts_with("NUtt_")) %>%
pivot_longer(cols = c(starts_with("PUtt_"), starts_with("NUtt_")),
names_to = "trial", values_to = "response") %>%
separate(trial, into=c("utt","exp","race", "gender","question", "random")) %>%
rename(id = `ResponseId`) %>%
mutate(question = case_when(question == "GT" ~ "true state",
question == "check" ~ "check"),
condition = case_when(utt == "PUtt" & exp == "PExp" ~ "PU_PE",
utt == "PUtt" & exp == "NExp" ~ "PU_NE",
utt == "NUtt" & exp == "PExp" ~ "NU_PE",
utt == "NUtt" & exp == "NExp" ~ "NU_NE"),
condition = fct_relevel(condition, "PU_PE", "PU_NE", "NU_PE", "NU_NE"),
response = fct_relevel(response, "1", "2", "3", "4", "5", "6")) %>%
select(-random) %>%
filter(response != "")
checks <- d %>%
filter(question == "check") %>%
mutate(check_score = case_when(race == "A" & grepl("H", response, ignore.case = TRUE) ~ 1,
race == "B" & grepl("O", response, ignore.case = TRUE) ~ 1,
race == "L" & grepl("U", response, ignore.case = TRUE) ~ 1,
race == "W" & grepl("L", response, ignore.case = TRUE) ~ 1,
TRUE ~ 0)) %>%
group_by(id) %>%
summarize(perc_correct = mean(check_score))
ggplot(checks, aes(perc_correct)) +
geom_histogram(binwidth=.01) +
theme_bw() +
xlab("accuracy on check questions") +
ylab("number of participants")
# Only include those who got all check questions correct
d <- full_join(d, checks) %>%
filter(perc_correct == 1) %>%
filter
d2 <- d %>%
mutate(utt = case_when(utt == "PUtt" ~ "good",
utt == "NUtt" ~ "bad"),
exp = case_when(exp == "PExp" ~ "smile",
exp == "NExp" ~ "frown"),
utt = fct_relevel(utt, "good"),
exp = fct_relevel(exp, "smile"),
condition = case_when(condition=="PU_PE" ~ "good smile",
condition=="NU_NE" ~ "bad frown",
condition=="PU_NE" ~ "good frown",
condition=="NU_PE" ~ "bad smile"),
condition = factor(condition, levels=c("good smile", "bad frown", "good frown", "bad smile"))) %>%
filter(question=="true state") %>%
select(-perc_correct)
condition <- c('good smile', 'bad frown', 'good frown','good frown')
response <- as.factor(c(1, 5, 5, 6))
n <- c(0, 0, 0, 0)
zeros <- data.frame(condition, response, n)
n_condition <- d2 %>%
group_by(condition) %>%
count()
n_condition
d.state <- d2 %>%
group_by(condition, response) %>%
count() %>%
bind_rows(zeros) %>%
mutate(proportion = case_when(condition=="good smile" ~ n/55,
condition=="good frown" ~ n/55,
condition=="bad smile" ~ n/55,
condition=="bad frown" ~ n/55),
ci_l = case_when(condition=="good smile" ~ prop.test(n, 55)$conf.int[1],
condition=="good frown" ~ prop.test(n, 55)$conf.int[1],
condition=="bad smile" ~ prop.test(n, 55)$conf.int[1],
condition=="bad frown" ~ prop.test(n, 55)$conf.int[1]),
ci_u = case_when(condition=="good smile" ~ prop.test(n, 55)$conf.int[2],
condition=="good frown" ~ prop.test(n, 55)$conf.int[2],
condition=="bad smile" ~ prop.test(n, 55)$conf.int[2],
condition=="bad frown" ~ prop.test(n, 55)$conf.int[2]))
pd <- position_dodge(0.2)
h.state.plot <- d.state %>%
ggplot(., aes(x = response, y = proportion, group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
geom_pointrange(aes(ymin=ci_l, ymax=ci_u), size = 0.25, position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("true state") +
ylab("proportion chosen") +
theme_bw() +
ggtitle("Human Data") +
theme(plot.title = element_text(hjust = 0.5))
h.state.plot
