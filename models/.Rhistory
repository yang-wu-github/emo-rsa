d.Mb5.l1 <- bind_rows(d.Mb5$l1) %>%
mutate(model = "Mb5: UttBalEmoTruSoc")
# l1: state
Mb5.state <- d.Mb5.l1 %>%
group_by(utterance, emotion, state, model) %>%
summarize(expval = sum(prob))
# l1: emoComm
Mb5.emoComm <- d.Mb5.l1 %>%
group_by(utterance, emotion, emoComm, model) %>%
summarize(expval = sum(prob))
# l1: infGoal
Mb5.infGoal <- d.Mb5.l1 %>%
group_by(utterance, emotion, infGoal, model) %>%
summarize(expval = sum(prob))
# l1: socGoal
Mb5.socGoal <- d.Mb5.l1 %>%
group_by(utterance, emotion, socGoal, model) %>%
summarize(expval = sum(prob))
d.Mb6 <- webppl(
program_file = here("models/Mb6_UttBalEmoTruBal.wppl"),
data = df,
data_var = "df"
)
d.Mb6.l1 <- bind_rows(d.Mb6$l1) %>%
mutate(model = "Mb6: UttBalEmoTruBal")
# l1: state
Mb6.state <- d.Mb6.l1 %>%
group_by(utterance, emotion, state, model) %>%
summarize(expval = sum(prob))
# l1: emoComm
Mb6.emoComm <- d.Mb6.l1 %>%
group_by(utterance, emotion, emoComm, model) %>%
summarize(expval = sum(prob))
# l1: infGoal
Mb6.infGoal <- d.Mb6.l1 %>%
group_by(utterance, emotion, infGoal, model) %>%
summarize(expval = sum(prob))
# l1: socGoal
Mb6.socGoal <- d.Mb6.l1 %>%
group_by(utterance, emotion, socGoal, model) %>%
summarize(expval = sum(prob))
d.raw <- read.csv(here("models/EMORSA2.csv"))
d <- d.raw %>%
slice(-1:-8) %>%
select(ResponseId, Status, starts_with("PUtt_"), starts_with("NUtt_")) %>%
pivot_longer(cols = c(starts_with("PUtt_"), starts_with("NUtt_")),
names_to = "trial", values_to = "response") %>%
separate(trial, into=c("utt","exp","race", "gender","question", "random")) %>%
rename(id = `ResponseId`, status = `Status`) %>%
mutate(question = case_when(question == "feed" ~ "accurate feedback",
question == "nice" ~ "niceness",
question == "taste" ~ "ground truth",
question == "face" ~ "real expression",
question == "state" ~ "real utterance",
question == "check" ~ "check"),
question = fct_relevel(question, "ground truth", "accurate feedback", "niceness", "real expression", "real utterance"),
condition = case_when(utt == "PUtt" & exp == "PExp" ~ "PU_PE",
utt == "PUtt" & exp == "NExp" ~ "PU_NE",
utt == "NUtt" & exp == "PExp" ~ "NU_PE",
utt == "NUtt" & exp == "NExp" ~ "NU_NE"),
condition = fct_relevel(condition, "PU_PE", "PU_NE", "NU_PE", "NU_NE"),
response = fct_relevel(response, "1", "2", "3", "4", "5", "6")) %>%
filter(response != "")
checks <- d %>%
filter(question == "check") %>%
mutate(check_score = case_when(race == "A" & grepl("H", response, ignore.case = TRUE) ~ 1,
race == "B" & grepl("O", response, ignore.case = TRUE) ~ 1,
race == "L" & grepl("U", response, ignore.case = TRUE) ~ 1,
race == "W" & grepl("L", response, ignore.case = TRUE) ~ 1,
TRUE ~ 0)) %>%
group_by(id) %>%
summarize(perc_correct = mean(check_score))
ggplot(checks, aes(perc_correct)) +
geom_histogram(binwidth=.01) +
theme_bw() +
xlab("accuracy on check questions") +
ylab("number of participants")
# Only include those who got 75% or more check questions correct
d <- full_join(d, checks) %>%
filter(perc_correct > .50) %>%
filter
d2 <- d %>%
mutate(utt = case_when(utt == "PUtt" ~ "good",
utt == "NUtt" ~ "bad"),
exp = case_when(exp == "PExp" ~ "smile",
exp == "NExp" ~ "frown"),
utt = fct_relevel(utt, "good"),
exp = fct_relevel(exp, "smile"),
condition = case_when(condition=="PU_PE" ~ "good smile",
condition=="NU_NE" ~ "bad frown",
condition=="PU_NE" ~ "good frown",
condition=="NU_PE" ~ "bad smile"),
condition = factor(condition, levels=c("good smile", "bad frown", "good frown", "bad smile")))
# state: models
state0 <- rbind(Ma0.state, Ma1.state, Ma2.state, Ma3.state, Ma4.state, Ma5.state, Ma6.state,
Mb0.state, Mb1.state, Mb2.state, Mb3.state, Mb4.state, Mb5.state, Mb6.state)
state <- state0 %>%
mutate(condition = paste(utterance, emotion),
condition = factor(condition, levels = c("good smile", "bad frown", "good frown", "bad smile")))
pd <- position_dodge(0.2)
state.plot <- ggplot(state, aes(x = state, y = expval,
group = condition,
color=condition)) +
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
theme_bw() +
ylim(0, 1) +
theme(legend.position='none')+
#ggtitle("Models") +
#theme(legend.position='none',
#      plot.title = element_text(hjust = 0.5)) +
facet_grid(cols = vars(model))
state.plot
# state: human
d.state <- d2[d$question=="ground truth",] %>%
group_by(condition, response) %>%
count() %>%
mutate(probability = case_when(condition=="good smile" ~ n/59,
condition=="good frown" ~ n/58,
condition=="bad smile" ~ n/58,
condition=="bad frown" ~ n/58))
h.state.plot <- d.state %>%
ggplot(., aes(x = response, y = probability,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 0.5) +
xlab("state") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
h.state.plot
state.total <- state.plot + h.state.plot + plot_layout(ncol=2, widths=c(14,1))
state.total
# models
infGoal0 <- rbind(Ma0.infGoal, Ma1.infGoal, Ma2.infGoal, Ma3.infGoal, Ma4.infGoal, Ma5.infGoal, Ma6.infGoal,
Mb0.infGoal, Mb1.infGoal, Mb2.infGoal, Mb3.infGoal, Mb4.infGoal, Mb5.infGoal, Mb6.infGoal)
infGoal <- infGoal0 %>%
mutate(condition = paste(utterance, emotion),
condition = factor(condition, levels = c("good smile", "bad frown", "good frown", "bad smile")))
pd <- position_dodge(0.2)
infGoal.plot <- ggplot(infGoal, aes(x = infGoal, y = expval,
group = condition,
color=condition)) +
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
theme_bw() +
theme(legend.position='none')+
ylim(0, 0.3) +
#ggtitle("Models") +
#theme(legend.position='none',
#      plot.title = element_text(hjust = 0.5)) +
facet_grid(cols = vars(model))
infGoal.plot
# human
d.infGoal <- d2[d$question=="accurate feedback",] %>%
group_by(condition, response) %>%
count() %>%
mutate(probability = case_when(condition=="good smile" ~ n/59,
condition=="good frown" ~ n/58,
condition=="bad smile" ~ n/58,
condition=="bad frown" ~ n/58))
h.infGoal.plot <- d.infGoal %>%
ggplot(., aes(x = response, y = probability,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 0.5) +
xlab("infGoal") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
h.infGoal.plot
infGoal.total <- infGoal.plot + h.infGoal.plot + plot_layout(ncol=2, widths=c(14,1))
infGoal.total
# models
socGoal0 <- rbind(Ma0.socGoal, Ma1.socGoal, Ma2.socGoal, Ma3.socGoal, Ma4.socGoal, Ma5.socGoal, Ma6.socGoal,
Mb0.socGoal, Mb1.socGoal, Mb2.socGoal, Mb3.socGoal, Mb4.socGoal, Mb5.socGoal, Mb6.socGoal)
socGoal <- socGoal0 %>%
mutate(condition = paste(utterance, emotion),
condition = factor(condition, levels = c("good smile", "bad frown", "good frown", "bad smile")))
pd <- position_dodge(0.2)
socGoal.plot <- ggplot(socGoal, aes(x = socGoal, y = expval,
group = condition,
color=condition)) +
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
theme_bw() +
theme(legend.position='none')+
ylim(0, 0.3) +
#ggtitle("Models") +
#theme(legend.position='none',
#      plot.title = element_text(hjust = 0.5)) +
facet_grid(cols = vars(model))
socGoal.plot
# human
d.socGoal <- d2[d$question=="niceness",] %>%
group_by(condition, response) %>%
count() %>%
mutate(probability = case_when(condition=="good smile" ~ n/59,
condition=="good frown" ~ n/58,
condition=="bad smile" ~ n/58,
condition=="bad frown" ~ n/58))
h.socGoal.plot <- d.socGoal %>%
ggplot(., aes(x = response, y = probability,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 0.5) +
xlab("socGoal") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
h.socGoal.plot
socGoal.total <- socGoal.plot + h.socGoal.plot + plot_layout(ncol=2, widths=c(14,1))
socGoal.total
total <- state.total / infGoal.total / socGoal.total
ggsave(here("models/plots_14models_graded.pdf"), width=22, height=8)
model_state_ave <- state %>%
mutate(score = state*expval) %>%
group_by(model, condition) %>%
summarise(mean = mean(score))
human.state.ave <- d.state %>%
mutate(score = (as.numeric(response)-1) * probability /7) %>%
group_by(condition) %>%
summarise(mean=sum(score)) %>%
mutate(model = "human (pilot)")
state_ave <- rbind(data.frame(model_state_ave), data.frame(human.state.ave))
state_ave_plot <- ggplot(state_ave, aes(x = model, y = mean,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("state") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
state_ave_plot
model_infGoal_ave <- infGoal %>%
mutate(score = infGoal*expval) %>%
group_by(model, condition) %>%
summarise(mean = sum(score))
human.infGoal.ave <- d.infGoal %>%
mutate(score = (as.numeric(response)-1) * probability /7) %>%
group_by(condition) %>%
summarise(mean=sum(score)) %>%
mutate(model = "human (pilot)")
infGoal_ave <- rbind(data.frame(model_infGoal_ave), data.frame(human.infGoal.ave))
infGoal_ave_plot <- ggplot(infGoal_ave, aes(x = model, y = mean,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("infGoal") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
infGoal_ave_plot
model_socGoal_ave <- socGoal %>%
mutate(score = socGoal*expval) %>%
group_by(model, condition) %>%
summarise(mean = sum(score))
human.socGoal.ave <- d.socGoal %>%
mutate(score = (as.numeric(response)-1) * probability /7) %>%
group_by(condition) %>%
summarise(mean=sum(score)) %>%
mutate(model = "human (pilot)")
socGoal_ave <- rbind(data.frame(model_socGoal_ave), data.frame(human.socGoal.ave))
socGoal_ave_plot <- ggplot(socGoal_ave, aes(x = model, y = mean,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("socGoal") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
socGoal_ave_plot
# l1: emoComm
Ma5.emoComm <- d.Ma5.l1 %>%
group_by(utterance, emotion, emoComm, model) %>%
summarize(expval = sum(prob))
# l1: emoComm
Ma6.emoComm <- d.Ma6.l1 %>%
group_by(utterance, emotion, emoComm, model) %>%
summarize(expval = sum(prob))
Ma0_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma0: UttInfNoEmo", mean = NA)
Ma0_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma0: UttInfEmoNon", mean = NA)
Ma1_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma1: UttInfEmoSoc", mean = NA)
Ma2_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma2: UttInfEmoBal", mean = NA)
Ma3_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma3: UttInfEmoTru", mean = NA)
Ma4_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma4: UttInfEmoInf", mean = NA)
Mb0_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb0: UttBalEmoNon", mean = NA)
Mb1_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb1: UttBalEmoSoc", mean = NA)
Mb2_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb2: UttBalEmoBal", mean = NA)
Mb3_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb3: UttBalEmoTru", mean = NA)
Mb4_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb4: UttBalEmoInf", mean = NA)
h_emoComm_ave <- M3_emoComm_ave %>%
mutate(model= "human (pilot)", mean = NA)
Ma5_emoComm_ave <- Ma5.emoComm %>%
mutate(condition = paste(utterance, emotion),
emoComm = case_when(emoComm=="FALSE" ~ 0,
emoComm=="TRUE" ~ 1),
score = emoComm * expval) %>%
group_by(condition, model) %>%
summarise(mean=sum(score))
Ma6_emoComm_ave <- Ma6.emoComm %>%
mutate(condition = paste(utterance, emotion),
emoComm = case_when(emoComm=="FALSE" ~ 0,
emoComm=="TRUE" ~ 1),
score = emoComm * expval) %>%
group_by(condition, model) %>%
summarise(mean=sum(score))
Mb5_emoComm_ave <- Mb5.emoComm %>%
mutate(condition = paste(utterance, emotion),
emoComm = case_when(emoComm=="FALSE" ~ 0,
emoComm=="TRUE" ~ 1),
score = emoComm * expval) %>%
group_by(condition, model) %>%
summarise(mean=sum(score))
Mb6_emoComm_ave <- Mb6.emoComm %>%
mutate(condition = paste(utterance, emotion),
emoComm = case_when(emoComm=="FALSE" ~ 0,
emoComm=="TRUE" ~ 1),
score = emoComm * expval) %>%
group_by(condition, model) %>%
summarise(mean=sum(score))
Ma0_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma0: UttInfEmoNon", mean = NA)
Ma1_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma1: UttInfEmoSoc", mean = NA)
Ma2_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma2: UttInfEmoBal", mean = NA)
Ma3_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma3: UttInfEmoTru", mean = NA)
Ma4_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma4: UttInfEmoInf", mean = NA)
Mb0_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb0: UttBalEmoNon", mean = NA)
Mb1_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb1: UttBalEmoSoc", mean = NA)
Mb2_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb2: UttBalEmoBal", mean = NA)
Mb3_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb3: UttBalEmoTru", mean = NA)
Mb4_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb4: UttBalEmoInf", mean = NA)
h_emoComm_ave <- M3_emoComm_ave %>%
mutate(model= "human (pilot)", mean = NA)
h_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "human (pilot)", mean = NA)
emoComm_ave <- rbind(Ma0_emoComm_ave,Ma1_emoComm_ave, Ma2_emoComm_ave,
Ma3_emoComm_ave, Ma4_emoComm_ave, Ma5_emoComm_ave, Ma6_emoComm_ave,
Mb0_emoComm_ave,Mb1_emoComm_ave, Mb2_emoComm_ave,
Mb3_emoComm_ave, Mb4_emoComm_ave, Mb5_emoComm_ave, Mb6_emoComm_ave, h_emoComm_ave)
emoComm_ave <- emoComm_ave %>%
mutate(condition = factor(condition, levels = c("good smile", "bad frown", "good frown", "bad smile")),
model = factor(model, levels = c(..., "human (pilot)")))
model_state_ave <- state %>%
mutate(score = state*expval) %>%
group_by(model, condition) %>%
summarise(mean = mean(score))
human.state.ave <- d.state %>%
mutate(score = (as.numeric(response)-1) * probability /7) %>%
group_by(condition) %>%
summarise(mean=sum(score)) %>%
mutate(model = "pilot data")
state_ave <- rbind(data.frame(model_state_ave), data.frame(human.state.ave))
state_ave_plot <- ggplot(state_ave, aes(x = model, y = mean,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("state") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
state_ave_plot
model_infGoal_ave <- infGoal %>%
mutate(score = infGoal*expval) %>%
group_by(model, condition) %>%
summarise(mean = sum(score))
human.infGoal.ave <- d.infGoal %>%
mutate(score = (as.numeric(response)-1) * probability /7) %>%
group_by(condition) %>%
summarise(mean=sum(score)) %>%
mutate(model = "pilot data")
infGoal_ave <- rbind(data.frame(model_infGoal_ave), data.frame(human.infGoal.ave))
infGoal_ave_plot <- ggplot(infGoal_ave, aes(x = model, y = mean,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("infGoal") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
infGoal_ave_plot
model_socGoal_ave <- socGoal %>%
mutate(score = socGoal*expval) %>%
group_by(model, condition) %>%
summarise(mean = sum(score))
human.socGoal.ave <- d.socGoal %>%
mutate(score = (as.numeric(response)-1) * probability /7) %>%
group_by(condition) %>%
summarise(mean=sum(score)) %>%
mutate(model = "pilot data")
socGoal_ave <- rbind(data.frame(model_socGoal_ave), data.frame(human.socGoal.ave))
socGoal_ave_plot <- ggplot(socGoal_ave, aes(x = model, y = mean,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("socGoal") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
socGoal_ave_plot
Ma5_emoComm_ave <- Ma5.emoComm %>%
mutate(condition = paste(utterance, emotion),
emoComm = case_when(emoComm=="FALSE" ~ 0,
emoComm=="TRUE" ~ 1),
score = emoComm * expval) %>%
group_by(condition, model) %>%
summarise(mean=sum(score))
Ma6_emoComm_ave <- Ma6.emoComm %>%
mutate(condition = paste(utterance, emotion),
emoComm = case_when(emoComm=="FALSE" ~ 0,
emoComm=="TRUE" ~ 1),
score = emoComm * expval) %>%
group_by(condition, model) %>%
summarise(mean=sum(score))
Mb5_emoComm_ave <- Mb5.emoComm %>%
mutate(condition = paste(utterance, emotion),
emoComm = case_when(emoComm=="FALSE" ~ 0,
emoComm=="TRUE" ~ 1),
score = emoComm * expval) %>%
group_by(condition, model) %>%
summarise(mean=sum(score))
Mb6_emoComm_ave <- Mb6.emoComm %>%
mutate(condition = paste(utterance, emotion),
emoComm = case_when(emoComm=="FALSE" ~ 0,
emoComm=="TRUE" ~ 1),
score = emoComm * expval) %>%
group_by(condition, model) %>%
summarise(mean=sum(score))
Ma0_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma0: UttInfEmoNon", mean = NA)
Ma1_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma1: UttInfEmoSoc", mean = NA)
Ma2_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma2: UttInfEmoBal", mean = NA)
Ma3_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma3: UttInfEmoTru", mean = NA)
Ma4_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Ma4: UttInfEmoInf", mean = NA)
Mb0_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb0: UttBalEmoNon", mean = NA)
Mb1_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb1: UttBalEmoSoc", mean = NA)
Mb2_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb2: UttBalEmoBal", mean = NA)
Mb3_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb3: UttBalEmoTru", mean = NA)
Mb4_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "Mb4: UttBalEmoInf", mean = NA)
h_emoComm_ave <- Ma5_emoComm_ave %>%
mutate(model= "pilot data", mean = NA)
emoComm_ave <- rbind(Ma0_emoComm_ave,Ma1_emoComm_ave, Ma2_emoComm_ave,
Ma3_emoComm_ave, Ma4_emoComm_ave, Ma5_emoComm_ave, Ma6_emoComm_ave,
Mb0_emoComm_ave,Mb1_emoComm_ave, Mb2_emoComm_ave,
Mb3_emoComm_ave, Mb4_emoComm_ave, Mb5_emoComm_ave, Mb6_emoComm_ave, h_emoComm_ave)
emoComm_ave <- emoComm_ave %>%
mutate(condition = factor(condition, levels = c("good smile", "bad frown", "good frown", "bad smile")))
emoComm_ave_plot <- ggplot(emoComm_ave, aes(x = model, y = mean,
group = condition, color=condition))+
geom_line(position=pd) +
geom_point(position=pd) +
scale_color_brewer(palette="Dark2") +
ylim(0, 1) +
xlab("emoComm") +
theme_bw() +
#ggtitle("Human") +
theme(plot.title = element_text(hjust = 0.5))
emoComm_ave_plot
total_ave <- state_ave_plot + infGoal_ave_plot + socGoal_ave_plot + emoComm_ave_plot & theme(legend.position = "top")
total_ave + plot_layout(ncol=1, guides = "collect")
ggsave(here("models/plots_14models_averaged.pdf"), width=24, height=8)
ggsave(here("models/plots_14models_averaged.pdf"), width=22, height=8)
